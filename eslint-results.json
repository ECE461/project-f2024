[{"filePath":"/Users/kimchaeeun/project-f2024/src/commands/test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/commands/urlCommand.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'URLHandler' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":19,"column":22,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":20,"endColumn":1,"fix":{"range":[849,849],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":29,"column":38,"nodeType":"VariableDeclaration","messageId":"missingSemi","endLine":30,"endColumn":1,"fix":{"range":[1103,1103],"text":";"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {Logger} from '../logUtils';\nimport { URLFileHandler } from '../utils/URLFileHandler';\nimport { BusFactor } from '../metrics/BusFactor';\nimport { Correctness } from '../metrics/Correctness';\nimport { RampUp } from '../metrics/RampUp';\nimport { License } from '../metrics/License';\nimport { ResponsiveMetric } from '../metrics/ResponsiveMetric';\nimport { NetScore } from '../metrics/NetScore';\nimport { URLHandler } from '../utils/URLHandler';\nimport { gitClone } from '../utils/isoGitHelper';\nimport { createNDJsonResult } from '../metrics/resultsHelper';\n\nexport async function urlCommand (argument:string) {\n\n    const urls = await URLFileHandler.getGithubUrlsFromFile(argument);\n    // If null, failed check for file or invalid URLs\n    if (urls === null) {\n      Logger.logInfo('Error reading file or invalid URLs');\n      process.exit(1)\n    }\n    \n    // TODO: Maybe make this parallel?\n    for (const url of urls) {\n      // Clone repository\n      gitClone(url);\n\n      // Calculate metrics\n      Logger.logInfo(`Processing URL: ${url.getRepoURL()}`);\n      const netScore = new NetScore()\n      const busFactor = new BusFactor(url);  // git clone\n      const corScore = new Correctness(url);\n      const rampUp = new RampUp(url); // git api call\n      const licScore = new License(url); // git api call\n      const respMet = new ResponsiveMetric(url); // git api call\n\n      netScore.startTimer();\n      await Promise.allSettled([busFactor.calculateScore(), corScore.calculateScore(), rampUp.calculateScore(), licScore.calculateScore(), respMet.calculateScore()]);\n      netScore.endTimer();\n\n      await netScore.calculateScore(busFactor, corScore, licScore, rampUp,  respMet);\n\n      const ndjsonResult = createNDJsonResult(netScore, [rampUp, corScore, busFactor, respMet, licScore]);\n      \n      // Final Output\n      console.log(ndjsonResult);\n    }\n    process.exit(0);\n} ","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/logUtils.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":36,"column":58,"nodeType":"Literal","messageId":"wrongQuotes","endLine":36,"endColumn":62,"fix":{"range":[1178,1182],"text":"'\\n'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":46,"column":58,"nodeType":"Literal","messageId":"wrongQuotes","endLine":46,"endColumn":62,"fix":{"range":[1492,1496],"text":"'\\n'"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import * as fs from 'fs';\n\nenum LogLevel {\n    SILENT = 0, // Default log level\n    INFO = 1,\n    DEBUG = 2,\n}\n\n// Set settings from environment variables\nconst envLogLevel = parseInt(process.env.LOG_LEVEL || '0', 10);\nconst logLevel = Object.values(LogLevel).includes(envLogLevel) ? envLogLevel : LogLevel.SILENT;\nconst logFilePath = process.env.LOG_FILE || './default.log';\n\nif (!fs.existsSync(logFilePath)) {\n    fs.writeFileSync(logFilePath, '',  { flag: 'w' });\n}\n\n/**\n * @method logInfo\n * Logs message to file if log level is INFO(1) or higher\n * \n * @method logDebug\n * Logs message to file if log level is DEBUG(2) or higher\n * \n * How to use:\n * 1. Setup environment variables LOG_LEVEL and LOG_FILE\n * 2. Import Logger class in your file\n *      import { Logger } from './<path_to_dir>/logUtils';\n *      Logger.logInfo(\"Info Message\"); // Logs to file if log level is INFO(1) or higher\n *      Logger.logDebug(\"Debug Message\"); // Logs to file if log level is DEBUG(2) or higher\n */\nexport class Logger {\n    public static logInfo(message: string) {\n        if (logLevel >= LogLevel.INFO) {\n            try {\n                fs.appendFileSync(logFilePath, message + \"\\n\", 'utf8');\n            } catch (error) {\n                console.error('Error writing to log file:', error);\n            }   \n        }\n    }\n    \n    public static logDebug(message: string) {\n        if (logLevel >= LogLevel.DEBUG) {\n            try {\n                fs.appendFileSync(logFilePath, message + \"\\n\", 'utf8');\n            } catch (error) {\n                console.error('Error writing to log file:', error);\n            } \n        }\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/BusFactor.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":5,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":34,"fix":{"range":[146,157],"text":"'BusFactor'"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {Metric} from './Metric';\nimport { URLHandler } from '../utils/URLHandler';\n\nexport class BusFactor extends Metric {\n    jsonKey: string = \"BusFactor\";\n\n    constructor(url: URLHandler) {\n        super(url);\n    }\n\n    async calculateScore(): Promise<void> {\n\n        this.startTimer();\n        \n        //checks existence of cloned repository\n\n\n\n        \n        this.score = Math.random() * 10;\n\n        // End timer for latency\n        this.endTimer();\n\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/Correctness.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":36,"fix":{"range":[198,211],"text":"'Correctness'"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {Metric} from './Metric';\nimport { URLHandler } from '../utils/URLHandler';\nimport { gitClone } from '../utils/isoGitHelper';\n\nexport class Correctness extends Metric {\n    jsonKey: string = \"Correctness\";\n\n    constructor(url: URLHandler) {\n        super(url);\n    }\n    async calculateScore(): Promise<void> {\n        // Start timer for latency\n        this.startTimer();\n        gitClone(this.url);\n\n        this.score = Math.random();\n\n        // End timer for latency\n        this.endTimer();\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/License.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":5,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":32,"fix":{"range":[144,153],"text":"'License'"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {Metric} from './Metric';\nimport { URLHandler } from '../utils/URLHandler';\n\nexport class License extends Metric {\n    jsonKey: string = \"License\";\n\n    constructor(url: URLHandler) {\n        super(url);\n    }\n    async calculateScore(): Promise<void> {\n        // Start timer for latency\n        this.startTimer();\n\n        this.score = Math.random();\n \n        // End timer for latency\n        this.endTimer();\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/Metric.ts","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":33,"column":10,"nodeType":"ReturnStatement","messageId":"missingSemi","endLine":34,"endColumn":1,"fix":{"range":[745,745],"text":";"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { URLHandler } from '../utils/URLHandler';\n// Metric Class\n// has score variable, getScore, calculateScore, and url\n// Abstract Class\nexport abstract class Metric {\n    score: number;\n    url: URLHandler;\n    latency: number;\n    start: number;\n    abstract jsonKey: string;\n\n    constructor(url: URLHandler) {\n        this.score = 0;\n        this.url = url;\n        this.latency = 0;\n        this.start = 0;\n    }\n\n    abstract calculateScore(): Promise<void>; \n\n    getScore(): number {\n        return this.score;\n    }\n\n    getURL(): URLHandler {\n        return this.url;\n    }\n\n    public getJsonObject(): Object {\n        return {\n            [this.jsonKey]: this.score,\n            [this.getJSONLatencyKey()]: this.latency\n        }\n    }\n\n    private getJSONLatencyKey(): string {\n        return `${this.jsonKey}_Latency`;\n    }\n\n    public startTimer(): void {\n        this.start = Date.now();\n    }\n\n    public endTimer(): void {\n        this.latency = Date.now() - this.start;\n    }\n\n}\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/NetScore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'URLHandler' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":20},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":9,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":9,"endColumn":33,"fix":{"range":[309,319],"text":"'NetScore'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":47,"column":10,"nodeType":"ReturnStatement","messageId":"missingSemi","endLine":48,"endColumn":1,"fix":{"range":[1447,1447],"text":";"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { URLHandler } from '../utils/URLHandler';\nimport { BusFactor } from './BusFactor';\nimport { Correctness } from './Correctness';\nimport { RampUp } from './RampUp';\nimport { ResponsiveMetric } from './ResponsiveMetric';\nimport { License } from './License';\n\nexport class NetScore{\n    jsonKey: string = \"NetScore\";\n    latency: number;\n    score: number;\n    start: number;\n\n    constructor() {\n        this.latency = 0;\n        this.score = 0;\n        this.start = 0;\n    }\n\n    public startTimer(): void {\n        this.start = Date.now();\n    }\n\n    public endTimer(): void {\n        this.latency = Date.now() - this.start;\n    }\n    \n    public calculateScore(busFactor: BusFactor, correctness: Correctness, license: License, rampUp: RampUp, respMet: ResponsiveMetric): number {\n        const busWeight = 0.2;\n        const correctnessWeight = 0.2;\n        const licenseWeight = 0.2;\n        const rampUpWeight = 0.2;\n        const respMetWeight = 0.2;\n\n        this.score = busFactor.getScore() * busWeight + correctness.getScore() * correctnessWeight + license.getScore() * licenseWeight + rampUp.getScore() * rampUpWeight + respMet.getScore() * respMetWeight;\n        return this.score;\n    }\n\n    private getJsonLatencyKey(): string {\n        return `${this.jsonKey}_Latency`;\n    }\n\n    getJsonObject(): Object {\n        return {\n            [this.jsonKey]: this.score,\n            [this.getJsonLatencyKey()] : this.latency\n        }\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/RampUp.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":31,"fix":{"range":[170,178],"text":"'RampUp'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":33,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":38,"fix":{"range":[212,217],"text":"'.js'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":40,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":45,"fix":{"range":[219,224],"text":"'.ts'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":47,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":52,"fix":{"range":[226,231],"text":"'.py'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":54,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":61,"fix":{"range":[233,240],"text":"'.java'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":63,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":69,"fix":{"range":[242,248],"text":"'.cpp'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":71,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":75,"fix":{"range":[250,254],"text":"'.c'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":77,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":82,"fix":{"range":[256,261],"text":"'.cs'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":84,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":89,"fix":{"range":[263,268],"text":"'.rb'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":91,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":97,"fix":{"range":[270,276],"text":"'.php'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":18,"column":25,"nodeType":"Literal","messageId":"wrongQuotes","endLine":18,"endColumn":55,"fix":{"range":[519,549],"text":"'https://api.github.com/repos'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":31,"column":37,"nodeType":"VariableDeclaration","messageId":"missingSemi","endLine":32,"endColumn":1,"fix":{"range":[1130,1130],"text":";"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":101,"column":69,"nodeType":"Literal","messageId":"wrongQuotes","endLine":101,"endColumn":71,"fix":{"range":[4617,4619],"text":"''"}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"import {Metric} from './Metric';\nimport { URLHandler } from '../utils/URLHandler';\nimport axios from 'axios';\n\nexport class RampUp extends Metric {\n    jsonKey: string = \"RampUp\";\n    readonly programming_ext = [\".js\", \".ts\", \".py\", \".java\", \".cpp\", \".c\", \".cs\", \".rb\", \".php\"];\n\n    constructor(url: URLHandler) {\n        super(url);\n    }\n\n    async calculateScore(): Promise<void> {\n        // Start timer for latency\n        this.startTimer();\n\n        // Convert the base url to an API url\n        const apiBase = \"https://api.github.com/repos\";\n        const urlParts = this.url.getRepoURL().split('github.com/')[1].split('/');\n        const owner = urlParts[0];\n        const repo = urlParts[1];\n        let apiEndpoint = `${apiBase}/${owner}/${repo}/contents`;\n\n        // Make API calls to get the file information\n        try {\n            const response = await axios.get(apiEndpoint, {headers: {'Authorization': `token ${process.env.GITHUB_TOKEN}`}});\n            \n            const files = response.data;\n            let docs_folder = null;\n            let examples_folder = null;\n            let source_folder = null\n            let total_code_size = 0;\n            let total_documentation_size = 0;\n\n            // Get the size of the README and CHANGELOG files and check for docs and examples folders\n            files.forEach((file: any) => {\n                if (file.name.toLowerCase() === 'readme.md' || file.name.toLowerCase() === 'changelog.md') {\n                    total_documentation_size += file.size;\n                }\n                else if (file.type === 'dir' && (file.name.toLowerCase() === 'docs' || file.name.toLowerCase() === 'doc' || file.name.toLowerCase() === 'documentation' || file.name.toLowerCase() === 'documents')) {\n                    docs_folder = file.name;\n                }\n                else if (file.type === 'dir' && (file.name.toLowerCase() === 'examples' || file.name.toLowerCase() === 'sample' || file.name.toLowerCase() === 'samples' || file.name.toLowerCase() === 'demos' || file.name.toLowerCase() === 'example')) {\n                    examples_folder = file.name;\n                }\n                else if (file.type === 'dir' && (file.name.toLowerCase() === 'src' || file.name.toLowerCase() === 'source' || file.name.toLowerCase() === 'code' || file.name.toLowerCase() === 'lib')) {\n                    source_folder = file.name;\n                }\n                else if (file.type === 'file' && this.programming_ext.some(ext => file.name.endsWith(ext))) {\n                    total_code_size += file.size;\n                }\n            });\n\n            if(docs_folder) {\n                const documents = await axios.get(`${apiEndpoint}/${docs_folder}`, {headers: {'Authorization': `token ${process.env.GITHUB_TOKEN}`}});\n                documents.data.forEach((doc: any) => {\n                    total_documentation_size += doc.size;\n                });\n            }\n            if(examples_folder) {\n                const examples = await axios.get(`${apiEndpoint}/${examples_folder}`, {headers: {'Authorization': `token ${process.env.GITHUB_TOKEN}`}});\n                examples.data.forEach((example: any) => {\n                    total_documentation_size += example.size;\n                });\n            }\n            if(source_folder) {\n                // peform a 2-depth recursive search for source code files\n                total_code_size += await this.getRepoProgramFileCounts(apiEndpoint, source_folder);\n            }\n\n\n            if(total_documentation_size === 0) {\n                this.score = 0;\n            }\n            else {\n                const ramp_up_ratio = (total_documentation_size / total_code_size);\n\n                // for smaller projects\n                if(total_code_size < 10000)\n                {\n                    this.score = (ramp_up_ratio * 5 > 1) ? 1 : ramp_up_ratio * 5;\n                    // if 1 line of documentation per 5 lines of code, score is ~1\n                }\n                else\n                {\n                    this.score =  (ramp_up_ratio * 1.5 > 1) ? 1 : ramp_up_ratio * 1.5;\n                    // if 2 lines of documentation per 3 lines of code, score is ~1\n                    // this is higher because larger projects should have more documentation and examples (many lines)\n                }\n            }\n\n        } catch (error) {\n            console.error('Error getting repo files and sizes:', error);\n            this.score = 0;\n        }\n \n        // End timer for latency\n        this.endTimer();\n    }\n\n    async getRepoProgramFileCounts(baseApiUrl: string, path: string=\"\", currentDepth: number = 0, maxDepth: number = 2): Promise<number> {\n        let apiEndpoint = `${baseApiUrl}/${path}`;\n        let total_code_size = 0;\n\n        try {\n            const response = await axios.get(apiEndpoint, {headers: {'Authorization': `token ${process.env.GITHUB_TOKEN}`}});\n            const contents = response.data;\n\n            contents.forEach(async (item: any) => {\n                if(item.type === 'dir')\n                {\n                    if(currentDepth < maxDepth) {\n                        total_code_size += await this.getRepoProgramFileCounts(baseApiUrl, item.path, currentDepth + 1, maxDepth);\n                    }\n                }\n                else if(item.type === 'file' && this.programming_ext.some(ext => item.name.endsWith(ext))) {\n                    total_code_size += item.size;\n                }\n            });\n\n            return total_code_size;\n\n        } catch (error) {\n            console.error('Error getting repo files and sizes:', error);\n            return 0;\n        }\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/ResponsiveMetric.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":5,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":45,"fix":{"range":[153,175],"text":"'ResponsiveMaintainer'"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {Metric} from './Metric';\nimport { URLHandler } from '../utils/URLHandler';\n\nexport class ResponsiveMetric extends Metric {\n    jsonKey: string = \"ResponsiveMaintainer\";\n\n    constructor(url: URLHandler) {\n        super(url);\n    }\n    async calculateScore(): Promise<void> {\n        // Start timer for latency\n        this.startTimer();\n\n        this.score = Math.random();\n\n        // End timer for latency\n        this.endTimer();\n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/metrics/resultsHelper.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'URLHandler' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":20},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":1,"column":28,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":49,"fix":{"range":[27,48],"text":"'../utils/URLHandler'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":2,"column":24,"nodeType":"Literal","messageId":"wrongQuotes","endLine":2,"endColumn":34,"fix":{"range":[73,83],"text":"'./Metric'"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { URLHandler } from \"../utils/URLHandler\";\nimport { Metric } from \"./Metric\";\nimport { NetScore } from '../metrics/NetScore';\n\nfunction roundToTwoDecimals(num: number): number {\n    return Math.round(num * 100) / 100;\n}\n\nfunction roundNumbersInObject(obj: any): any {\n    for (const key in obj) {\n        if (typeof obj[key] === 'number') {\n            obj[key] = roundToTwoDecimals(obj[key]);\n        } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n            obj[key] = roundNumbersInObject(obj[key]);\n        }\n    }\n    return obj;\n}\n\nexport function createNDJsonResult(netScore: NetScore, metrics: Metric[]) : string {\n    let result = { URL: metrics[0].getURL() };\n    Object.assign(result, netScore.getJsonObject());\n\n    metrics.forEach(metric => {\n        Object.assign(result, metric.getJsonObject());\n    });\n\n    result = roundNumbersInObject(result);\n    return JSON.stringify(result) + '\\n';\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/run.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'log' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":38,"column":17,"nodeType":"Literal","messageId":"wrongQuotes","endLine":38,"endColumn":35,"fix":{"range":[1056,1074],"text":"'Running tests...'"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import minimist from 'minimist';\nimport { URLFileHandler } from './utils/URLFileHandler';\nimport { Logger } from './logUtils';\nimport { log } from 'console';\nimport { runTests } from './commands/test';\nimport {urlCommand} from './commands/urlCommand';\nimport { url } from 'inspector';\n\nconst usage = `\nUsage: node run.js [command] [options]\n\nCommands:\n  install           Install project dependencies\n  test              Run unit tests\n  <url_file>.txt    Score modules from URLs listed in .txt file\n`;\n\n/**\n * [main] - Home base of the program. Calls other functions based on command line\n * arguments e.g \"./run test\" or \"./run <url_file>\".\n * \n * Note: \"./run install\" is handled in the bash script \n */\nasync function main() {\n  // Parse command line arguments\n  const args = minimist(process.argv.slice(2));\n\n  // If no arguments are provided, show usage\n  if (args._.length === 0) {\n    console.log(usage);\n    process.exit(1);\n  }\n\n  const argument = args._[0];\n\n  if (argument === 'test') {\n    Logger.logDebug('Running tests...');\n    console.log(\"Running tests...\");\n    runTests();\n  }\n  else if (URLFileHandler.isTxtFile(argument)) {\n    // Score modules from URLs listed in file (arument)\n    await urlCommand(argument);\n  }\n  else {\n    console.log(usage);\n    process.exit(1);\n  }\n\n  process.exit(0);\n}\n\nmain().catch(error => {\n  Logger.logDebug('Error:'+ error);\n  process.exit(1);\n});","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/test/RampUp.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/test/URLFileHandler.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'URLHandler' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filePath' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'encoding' is defined but never used.","line":40,"column":85,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":93},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'callback' is defined but never used.","line":40,"column":95,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":103}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport { URLFileHandler } from '../urlUtils/URLFileHandler';\nimport { URLHandler } from '../urlUtils/URLHandler';\n\n// Mock the fs module\njest.mock('fs');\n\n// Mock the URLHandler class\njest.mock('../urlUtils/URLHandler', () => {\n  return {\n    URLHandler: jest.fn().mockImplementation(() => {\n      return {\n        setRepoURL: jest.fn().mockResolvedValue(undefined),\n        getRepoURL: jest.fn().mockResolvedValue('https://github.com/user/repo')\n      };\n    }),\n    isValidURL: jest.fn()\n  };\n});\n\ndescribe('URLFileHandler', () => {\n  describe('isTxtFile', () => {\n    it('should return true for .txt files', () => {\n      expect(URLFileHandler.isTxtFile('file.txt')).toBe(true);\n    });\n\n    it('should return false for non-.txt files', () => {\n      expect(URLFileHandler.isTxtFile('file.pdf')).toBe(false);\n    });\n  });\n\n  describe('getGithubUrlsFromFile', () => {\n    let filePath: string;\n    let data: string;\n\n    beforeEach(() => {\n      filePath = 'file.txt';\n      data = 'https://github.com/user/repo\\nhttps://github.com/user/repo2';\n\n      (fs.readFile as unknown as jest.Mock<any, any>).mockImplementation((filePath, encoding, callback) => {\n        if(filePath === 'file.txt') {\n          return data;\n        }\n        else if(filePath === 'invalid.txt') {\n          return 'invalid-url';\n        }\n        throw new Error('Invalid file');\n      });\n\n    });\n\n    it('should return null for an invalid file', async () => {\n      const urls = await URLFileHandler.getGithubUrlsFromFile('invalid.file');\n      expect(urls).toBe(null);\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/test/URLHandler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/test/example.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/utils/URLFileHandler.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":22,"column":39,"nodeType":"Literal","messageId":"wrongQuotes","endLine":22,"endColumn":41,"fix":{"range":[862,864],"text":"''"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { promises as fs } from 'fs';\nimport { URLHandler } from './URLHandler';\nimport { Logger } from '../logUtils';\n\nexport class URLFileHandler {\n    public static isTxtFile(filePath: string): boolean {\n        return filePath.endsWith('.txt');\n    }\n\n    public static async getGithubUrlsFromFile(filePath: string): Promise<URLHandler[] | null> {\n        try {\n            const data = await fs.readFile(filePath, 'utf-8');\n            const urls = data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n\n            const urlItems: URLHandler[] = [];\n            for (const url of urls) {\n                if (URLHandler.isValidURL(url)) {\n                    const URL = new URLHandler(url);\n                    await URL.setRepoURL();\n\n                    const githubUrl = await URL.getRepoURL();\n                    if (githubUrl !== \"\") {\n                        urlItems.push(URL);\n                    }\n                    else {\n                        // If URL is invalid, not github/npm, or github URL not found from npm URL -> return null\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n            return urlItems;\n        } catch (error) {\n            Logger.logDebug('Error reading file:' + error);\n            return null;\n        }\n        \n    }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/utils/URLHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fs' is defined but never used.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":27,"column":14,"nodeType":"Literal","messageId":"wrongQuotes","endLine":27,"endColumn":16,"fix":{"range":[588,590],"text":"''"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":40,"column":15,"nodeType":"ReturnStatement","messageId":"missingSemi","endLine":41,"endColumn":1,"fix":{"range":[871,871],"text":";"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":59,"column":12,"nodeType":"Literal","messageId":"wrongQuotes","endLine":59,"endColumn":14,"fix":{"range":[1319,1321],"text":"''"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { promises as fs } from 'fs';\nimport { Logger } from '../logUtils';\n\n/**\n * Class for URLs\n * \n * @method isValid\n * Returns if URL is valid\n * \n * @method getRepoURL\n * Returns the github repository URL\n * For npm URLs, returns github repository URL if available, else returns null\n * If URL in invalid or not github/npm, returns null\n *\n */\n\nexport class URLHandler {\n  url: string;\n  githubURL: string | null = null;\n  constructor(url: string) {\n    this.url = url;\n  }\n\n  public getRepoURL(): string {\n    if (this.githubURL === null) {\n      return \"\";\n    }\n    return this.githubURL;\n  }\n\n  public getURL(): string {\n    return this.url;\n  }\n\n  public async setRepoURL(): Promise<void> {\n    if (URLHandler.isValidURL(this.url)) {\n      const exists = await URLHandler.checkUrlExists(this.url);\n      if (!exists) {\n        return\n      }\n\n      if (this.url.startsWith('https://www.npmjs.com/package/')) {\n        this.githubURL = await URLHandler.getGithubURLFromNpmURL(this.url);\n      }\n      else if (this.url.startsWith('https://github.com/')) {\n        this.githubURL = this.url;\n      }\n    }\n  }\n  \n  public getRepoName(): string{\n    const match = this.url.match(/\\/([^\\/]+?)\\.git$/);\n\n    if (match && match.length > 1) {\n      return match[1];\n    }\n    \n    return \"\";\n  }\n\n  public static isValidURL(url: string): boolean {\n    // Check if URL is valid\n    try {\n        new URL(url);\n        return true;\n    } catch (error) {\n        Logger.logDebug('Invalid URL format:' + error);\n        return false;\n    }\n  }\n\n  public static async checkUrlExists(url: string): Promise<boolean> {\n    try {\n      const response = await fetch(url, { method: 'HEAD' });\n      return response.ok;\n    } catch (error) {\n      Logger.logInfo('Error checking URL:' + error);\n      return false;\n    }\n  }\n\n  public static async getGithubURLFromNpmURL(url: string): Promise<string | null> {\n    // Get github repository URL from npm package URL\n    try {\n        const response = await axios.get(url);\n        const html = response.data;\n        const githubURL = html.match(/https:\\/\\/github.com\\/[\\w-]+\\/[\\w-]+/);\n        if (githubURL) {\n            return githubURL[0];\n        }\n    } catch (error) {\n        Logger.logDebug('Error getting github URL from npm package:' + error);\n    }\n    return null;\n  }\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/Users/kimchaeeun/project-f2024/src/utils/isoGitHelper.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":41,"column":51,"nodeType":"Literal","messageId":"wrongQuotes","endLine":41,"endColumn":54,"fix":{"range":[1337,1340],"text":"'/'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":45,"column":100,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":46,"endColumn":1,"fix":{"range":[1509,1509],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":49,"column":55,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":50,"endColumn":1,"fix":{"range":[1633,1633],"text":";"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"//modules\nimport * as git from 'isomorphic-git';\nimport * as fs from 'fs'; //file system to r/w repo data\nimport * as http from 'isomorphic-git/http/node'; //http requests\nimport * as path from 'path';\n\nimport { URLHandler } from './URLHandler';\n\n/**\n * Stuff with  more arguments.\n * @method folderExists: checks whether a folder exists at the given path, if not, it creates the folder. otherwise \n *                       it doesn't do anything.\n * @param {string} path: provided path\n */\nexport function folderExists(path: string){\n    \n    if(!fs.existsSync(path)){\n        fs.mkdirSync(path, {recursive: true});\n        return;\n    }\n\n}\n\n/**\n * Stuff with  more arguments.\n * @method gitClone: uses isomorphic-git to clone remote repositories. you can find the cloned respositories under \n *                   project-f2024/cloned_repos/{repository-name}\n * @param {string} url: link to github repositor\n * @param {string} filename Argument two enz.\n */\nexport async function gitClone(url: URLHandler){\n\n    //cd.. back into project-f2024 folder\n    const proj_folder = path.join(__dirname, '../../');\n    \n    //create a new file in project-\n    const repo_folder = path.join(proj_folder, 'cloned_repos');\n    folderExists(repo_folder);\n\n    //create a new file in the current cwd\n    const cloned_folder = path.join(repo_folder + \"/\", url.getRepoName()); \n    folderExists(cloned_folder);\n    \n    try{\n        await git.clone({fs, http, dir: cloned_folder, url: url.url, singleBranch: true, depth: 1})\n        console.log('successful git clone');\n    }\n    catch(Error){\n        console.error('unsuccessful git clone', Error)\n    }\n\n}\n\ngitClone(new URLHandler('https://github.com/monkeytypegame/monkeytype.git'));\n\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]}]