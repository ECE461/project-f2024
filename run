#!/usr/bin/env bash

# Check that script is ran from root directory
if [ $0 != "./run" ]
then
  echo "Please run this script from the root directory with ./run"
  exit 1
fi

# Setup Logging for bash script **************************************
LOG_LEVEL=${LOG_LEVEL:-0}
LOG_FILE=${LOG_FILE:-"default.log"}

if ! [[ "$LOG_LEVEL" =~ ^[0-2]$ ]]; then
    echo "Error: Invalid LOG_LEVEL. Must be 0 (SILENT), 1 (INFO), or 2 (DEBUG). Defaulting to 0."
    LOG_LEVEL=0
fi

if [ ! -f "$LOG_FILE" ]; then
    touch "$LOG_FILE" || { echo "Error: Could not create log file $LOG_FILE."; exit 1; }
fi

LL_INFO=1
LL_DEBUG=2

log() {
    local level=$1
    local message=$2

    if [ "$LOG_LEVEL" -ge "$level" ]; then
        echo "${message}\n" >> $LOG_FILE
    fi
}
# ****************************************************************

# "install" command must be ran in bash because running js files requires "npm install" to be ran first
if [ "$1" == "install" ]; then
    npm install --silent
    STATUS=$?

    if [ $STATUS -eq 0 ]; then
        echo "Dependencies installed successfully"
        log $LL_INFO "Dependencies installed successfully"
    else
        echo "Error: ./run install failed with exit code $STATUS" >&2
        log $LL_INFO "Error: ./run install failed with exit code $STATUS"
    fi

    # Exit with 0 if npm install was successful, otherwise exit with the error code
    exit $STATUS
else
    # Check if dependencies are installed:
    if [ ! -d "node_modules" ]; then
        log $LL_INFO "Error: Dependencies are not installed. Run './run install' first"
        echo "Error: Dependencies are not installed. Run './run install' first" >&2
        exit 1
    fi

    # run.js handles "test" and "<url_file>" commands
    npx ts-node src/run.ts "$@"
    STATUS=$?

    exit $STATUS
fi